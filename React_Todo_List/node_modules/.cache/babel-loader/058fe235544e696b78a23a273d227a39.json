{"ast":null,"code":"var bytesToUuid = require('./bytesToUuid');\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = new Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\nmodule.exports = function (name, version, hashfunc) {\n  var generateUUID = function (value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n    if (typeof value == 'string') value = stringToBytes(value);\n    if (typeof namespace == 'string') namespace = uuidToBytes(namespace);\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values'); // Per 4.3\n\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off + idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  }; // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name;\n  } catch (err) {} // Pre-defined namespaces, per Appendix C\n\n\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n  return generateUUID;\n};","map":{"version":3,"sources":["/home/user/Documents/react projects/react_crash_todo/node_modules/uuid/lib/v35.js"],"names":["bytesToUuid","require","uuidToBytes","uuid","bytes","replace","hex","push","parseInt","stringToBytes","str","unescape","encodeURIComponent","Array","length","i","charCodeAt","module","exports","name","version","hashfunc","generateUUID","value","namespace","buf","offset","off","isArray","TypeError","concat","idx","err","DNS","URL"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,MAAIC,KAAK,GAAG,EAAZ;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,iBAAb,EAAgC,UAASC,GAAT,EAAc;AAC5CF,IAAAA,KAAK,CAACG,IAAN,CAAWC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAnB;AACD,GAFD;AAIA,SAAOF,KAAP;AACD;;AAED,SAASK,aAAT,CAAuBC,GAAvB,EAA4B;AAC1BA,EAAAA,GAAG,GAAGC,QAAQ,CAACC,kBAAkB,CAACF,GAAD,CAAnB,CAAd,CAD0B,CACe;;AACzC,MAAIN,KAAK,GAAG,IAAIS,KAAJ,CAAUH,GAAG,CAACI,MAAd,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACI,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnCX,IAAAA,KAAK,CAACW,CAAD,CAAL,GAAWL,GAAG,CAACM,UAAJ,CAAeD,CAAf,CAAX;AACD;;AACD,SAAOX,KAAP;AACD;;AAEDa,MAAM,CAACC,OAAP,GAAiB,UAASC,IAAT,EAAeC,OAAf,EAAwBC,QAAxB,EAAkC;AACjD,MAAIC,YAAY,GAAG,UAASC,KAAT,EAAgBC,SAAhB,EAA2BC,GAA3B,EAAgCC,MAAhC,EAAwC;AACzD,QAAIC,GAAG,GAAGF,GAAG,IAAIC,MAAP,IAAiB,CAA3B;AAEA,QAAI,OAAOH,KAAP,IAAiB,QAArB,EAA+BA,KAAK,GAAGd,aAAa,CAACc,KAAD,CAArB;AAC/B,QAAI,OAAOC,SAAP,IAAqB,QAAzB,EAAmCA,SAAS,GAAGtB,WAAW,CAACsB,SAAD,CAAvB;AAEnC,QAAI,CAACX,KAAK,CAACe,OAAN,CAAcL,KAAd,CAAL,EAA2B,MAAMM,SAAS,CAAC,iCAAD,CAAf;AAC3B,QAAI,CAAChB,KAAK,CAACe,OAAN,CAAcJ,SAAd,CAAD,IAA6BA,SAAS,CAACV,MAAV,KAAqB,EAAtD,EAA0D,MAAMe,SAAS,CAAC,6DAAD,CAAf,CAPD,CASzD;;AACA,QAAIzB,KAAK,GAAGiB,QAAQ,CAACG,SAAS,CAACM,MAAV,CAAiBP,KAAjB,CAAD,CAApB;AACAnB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAYA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoBgB,OAA/B;AACAhB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAYA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAZ,GAAoB,IAA/B;;AAEA,QAAIqB,GAAJ,EAAS;AACP,WAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4B,EAAEA,GAA9B,EAAmC;AACjCN,QAAAA,GAAG,CAACE,GAAG,GAACI,GAAL,CAAH,GAAe3B,KAAK,CAAC2B,GAAD,CAApB;AACD;AACF;;AAED,WAAON,GAAG,IAAIzB,WAAW,CAACI,KAAD,CAAzB;AACD,GArBD,CADiD,CAwBjD;;;AACA,MAAI;AACFkB,IAAAA,YAAY,CAACH,IAAb,GAAoBA,IAApB;AACD,GAFD,CAEE,OAAOa,GAAP,EAAY,CACb,CA5BgD,CA8BjD;;;AACAV,EAAAA,YAAY,CAACW,GAAb,GAAmB,sCAAnB;AACAX,EAAAA,YAAY,CAACY,GAAb,GAAmB,sCAAnB;AAEA,SAAOZ,YAAP;AACD,CAnCD","sourcesContent":["var bytesToUuid = require('./bytesToUuid');\n\nfunction uuidToBytes(uuid) {\n  // Note: We assume we're being passed a valid uuid string\n  var bytes = [];\n  uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {\n    bytes.push(parseInt(hex, 16));\n  });\n\n  return bytes;\n}\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n  var bytes = new Array(str.length);\n  for (var i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nmodule.exports = function(name, version, hashfunc) {\n  var generateUUID = function(value, namespace, buf, offset) {\n    var off = buf && offset || 0;\n\n    if (typeof(value) == 'string') value = stringToBytes(value);\n    if (typeof(namespace) == 'string') namespace = uuidToBytes(namespace);\n\n    if (!Array.isArray(value)) throw TypeError('value must be an array of bytes');\n    if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError('namespace must be uuid string or an Array of 16 byte values');\n\n    // Per 4.3\n    var bytes = hashfunc(namespace.concat(value));\n    bytes[6] = (bytes[6] & 0x0f) | version;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    if (buf) {\n      for (var idx = 0; idx < 16; ++idx) {\n        buf[off+idx] = bytes[idx];\n      }\n    }\n\n    return buf || bytesToUuid(bytes);\n  };\n\n  // Function#name is not settable on some platforms (#270)\n  try {\n    generateUUID.name = name;\n  } catch (err) {\n  }\n\n  // Pre-defined namespaces, per Appendix C\n  generateUUID.DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\n  generateUUID.URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n\n  return generateUUID;\n};\n"]},"metadata":{},"sourceType":"script"}